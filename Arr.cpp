// Arr.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include"malloc.h"
#include"stdlib.h"//包含了exit函数

//定义了一个数据类型，该数据类型的名字叫做struct A人人，该数据类型含有三个成员：pBase，len，cnt。
struct Arr
{
	int * pBase;//存储的是数组第一个元素的地址
	int len;//数组所能容纳的最大元素的个数
	int cnt;//当前数组有效元素的个数
};

void init_arr(struct Arr *pArr,int lenght );//初始化
bool append_arr(struct Arr *pArr,int val);//追加
bool insert_arr(struct Arr *pArr,int pos,int val);//pos:position 位置；pos的值从1开始
bool delect_arr(struct Arr *pArr, int pos, int *pVal);
bool get();
bool is_empty(struct Arr *pArr);//是否为空
bool is_full(struct Arr *pArr);//是否为满
void sort_arr(struct Arr *pArr);//排序
void show_arr(struct Arr * pArr);//输出
void inversion_arr(struct Arr *pArr);//倒置

int main(void)
{
	struct Arr arr;
	int val;

	init_arr(&arr,6);
	show_arr(&arr);
	append_arr(&arr, 1);
	append_arr(&arr, 10);
	append_arr(&arr, -3);
	append_arr(&arr, 6);
	append_arr(&arr, 88);
	append_arr(&arr, 11);
	if (delect_arr(&arr, 4, &val))
	{
		printf("删除成功！\n");
		printf("你删除的元素是:%d\n", val);
	}
	else
	{
		printf("删除失败!\n");
	}



/*	append_arr(&arr, 2);
	append_arr(&arr, 3);
	append_arr(&arr, 4);
	append_arr(&arr, 5);
	append_arr(&arr, 6);
	append_arr(&arr, 7);
	if (append_arr(&arr, 8))
	{
		printf("追加成功\n");
	}
	else
	{
		printf("追加失败");
	}
*/
	insert_arr(&arr, 1, 99);
	show_arr(&arr);
	inversion_arr(&arr);
	printf("倒置之后的素组内容是：\n");
	show_arr(&arr);
	sort_arr(&arr);



    return 0;
}

void init_arr(struct Arr *pArr, int  length)
{
	pArr->pBase = (int *)malloc(sizeof(int) * length);//分配内存
	// 相当于pArr这个指针变量所指向的结构体变量中的pBase成员
	if (NULL == pArr->pBase)
	{
		printf("动态内存分配失败\n");
		exit(-1);//终止整个程序

	}
	else
	{
		pArr->len = length;
		pArr->cnt = 0;

	}
	return;//完成初始化
}

	bool is_empty(struct Arr * pArr)//判断是否为空
	{
		if (0 == pArr->cnt)
			return true;
		else
			return false;
	
	}

	bool  is_full(struct Arr * pArr)//判断是否为满
	{
		if (pArr->cnt == pArr->len)
			return true;
		else
			return false;

	}

//输出
	void show_arr(struct Arr * pArr)
	{
		if (is_empty(pArr))
		{
			printf("数组为空！");
		}
		else
		{
			for (int i = 0; i < pArr->cnt; ++i)
				printf("%5d", pArr->pBase[i]);//int * 类型
			printf("\n"); 
		}
	}

	bool append_arr(struct Arr * pArr, int val)
	{
		//满时返回false
		if (is_full(pArr))
			return false;
		//不满时追加
		pArr->pBase[pArr->cnt] = val;
		(pArr->cnt)++;
		return true;
	}
//追加
bool insert_arr(struct Arr *pArr, int pos, int val)
	{
		int i;

		if (is_full(pArr))
			return false;
		if (pos<1 || pos>pArr->cnt + 1)
			return false;

		for (i = pArr->cnt - 1; i >= pos - 1; --i)
		{
			pArr->pBase[i + 1] = pArr->pBase[i];
		}
		pArr->pBase[pos - 1] = val;
		(pArr->cnt)++;

		return true;
		
		}
//删除	
bool delect_arr(struct Arr *pArr, int pos, int *pVal)
{
	int i;

	if (is_empty(pArr))
		return false;
	if (pos<1 || pos>pArr->cnt)
		return false;

	*pVal = pArr->pBase[pos - 1];
	for (i = pos; i < pArr->cnt; ++i)
	{
		pArr->pBase[i-1] = pArr->pBase[i];
	}
	pArr->cnt--;
	return true;

}
//倒置
void inversion_arr(struct Arr *pArr)
{
	int i = 0;
	int j = pArr->cnt - 1;
	int t;
	
	while (i < j)
	{
		t = pArr->pBase[i];
		pArr->pBase[i] = pArr->pBase[j];
		pArr->pBase[j] = t;
		++i;
		--j;
	}

	return;

}

//排序
void sort_arr(struct Arr *pArr)
{
	int i, j, t;

	for (i = 0; i < pArr->cnt; ++i)
	{
		for (j = i + 1; j < pArr->cnt; ++j)
		{
			if (pArr->pBase[i] > pArr->pBase[j])
			{
				t = pArr->pBase[i];
				pArr->pBase[i] = pArr->pBase[j];
				pArr->pBase[j] = t;
			}
		}

	}
}

